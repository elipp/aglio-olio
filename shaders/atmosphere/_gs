#version 410 core

layout(triangles) in;

layout(triangle_strip) out;
layout(max_vertices = 3) out;

precision highp float;

uniform mat4 ModelView;
uniform mat4 Projection;
uniform sampler2D texture_color;
uniform sampler2D heightmap;
uniform vec4 light;
uniform int lightsrc;
uniform float running;

layout(location = 0) in vec3 Position_GS_in[];
layout(location = 1) in vec3 Normal_GS_in[];
layout(location = 2) in vec2 TexCoord_GS_in[];

layout(location = 0) out vec3 Position_FS_in;
layout(location = 1) out vec3 Normal_FS_in;
layout(location = 2) out vec2 TexCoord_FS_in;

vec3 getSurfaceNormal(vec3 v0, vec3 v1, vec3 v2) {
	vec3 p1 = v2 - v0;
	vec3 p2 = v1 - v0;
	return normalize(cross(p1,p2));
}

void main()
{
	vec3 surf_norm = getSurfaceNormal(gl_in[0].gl_Position.xyz, gl_in[1].gl_Position.xyz, gl_in[2].gl_Position.xyz);
	// simple pass-through
	for (int i = 0; i < gl_in.length(); i++) {
		gl_Position = Projection*vec4(gl_in[i].gl_Position.xyz,  1.0);
		Position_FS_in = Position_GS_in[i];
		Normal_FS_in = 0.5*(surf_norm+Normal_FS_in[i]);
		TexCoord_FS_in = TexCoord_GS_in[i];
		EmitVertex();
	}
	EndPrimitive();
}
