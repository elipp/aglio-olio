#version 410 core

uniform mat4 ModelView;

layout (vertices = 3) out;

layout (location = 0) in vec3 WorldPos_CS_in[];
layout (location = 1) in vec3 Normal_CS_in[];
layout (location = 2) in vec2 TexCoord_CS_in[];

layout (location = 0) out vec3 WorldPos_ES_in[];
layout (location = 1) out vec3 Normal_ES_in[];
layout (location = 2) out vec2 TexCoord_ES_in[];

uniform float TESS_LEVEL_INNER;
uniform float TESS_LEVEL_OUTER;

#define ID gl_InvocationID

float GetTessLevel(float d0, float d1) {
	float avg = 0.5*(d0 + d1);
	if (avg <= 3.5) {
		return 16.0;
	}
	else if (avg <= 5.5) {
		return 5.0;
	}
	else {
		return 2.0;
	}
}

void main()
{
	TexCoord_ES_in[ID] = TexCoord_CS_in[ID];
	Normal_ES_in[ID] = Normal_CS_in[ID];
	WorldPos_ES_in[ID] = WorldPos_CS_in[ID];

	vec3 wp0 = (ModelView*vec4(WorldPos_CS_in[0], 1.0)).xyz;
	vec3 wp1 = (ModelView*vec4(WorldPos_CS_in[1], 1.0)).xyz;
	vec3 wp2 = (ModelView*vec4(WorldPos_CS_in[2], 1.0)).xyz;

	float d0 = length(wp0);	// camera pos = 0,0,0
	float d1 = length(wp1);
	float d2 = length(wp2);

	gl_TessLevelOuter[0] = GetTessLevel(d1, d2);
	gl_TessLevelOuter[1] = GetTessLevel(d2, d0);
	gl_TessLevelOuter[2] = GetTessLevel(d0, d1);
	gl_TessLevelInner[0] = gl_TessLevelOuter[2];


}
