#version 410 core
layout(triangles, equal_spacing, ccw) in;

uniform mat4 Projection;
uniform mat4 ModelView;
uniform sampler2D HEIGHTMAP;

layout (location = 0) in vec3 WorldPos_ES_in[];
layout (location = 1) in vec3 Normal_ES_in[];
layout (location = 2) in vec2 TexCoord_ES_in[];

layout (location = 0) out vec3 WorldPos_GS_in;
layout (location = 1) out vec3 Normal_GS_in;
layout (location = 2) out vec2 TexCoord_GS_in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec3 avg3D(vec3 v0, vec3 v1, vec3 v2)
{
    return (v0+v1+v2)/3;
}

vec3 getSurfaceNormal(vec3 v0, vec3 v1, vec3 v2) {
	vec3 p1 = v2 - v0;
	vec3 p2 = v1 - v0;
	return normalize(cross(p1,p2));
}

void main() {

	vec3 pos = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);
	vec4 w_pos_transformed = ModelView*vec4(pos.xyz, 1.0);
	TexCoord_GS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);
	WorldPos_GS_in = w_pos_transformed.xyz;
	
	vec3 disp_normal = normalize(pos);
	vec3 disp_normal_transformed = normalize(inverse(transpose(mat3(ModelView)))*disp_normal);
	Normal_GS_in = disp_normal_transformed;
	
	float hval = texture2D(HEIGHTMAP, vec2(TexCoord_GS_in.s, TexCoord_GS_in.t + 0.5)).x;	
	//if (hval > 0.08) { hval = hval + 0.1; }

	gl_Position = vec4(WorldPos_GS_in + 0.5*disp_normal_transformed*hval, 1.0);
}
