#version 410 core

layout(triangles) in;

layout(triangle_strip) out;
layout(max_vertices = 3) out;

precision highp float;

uniform mat4 ModelView;
uniform mat4 Projection;
uniform sampler2D texture_color;
uniform sampler2D heightmap;
uniform vec4 light;
uniform int lightsrc;
uniform float running;

in vec3 Position_GS_in[];
in vec3 Normal_GS_in[];
in vec2 TexCoord_GS_in[];


void main()
{
	// simple pass-through
	for (int i = 0; i < 3; i++) {
		float height_sample = length(texture2D(heightmap, vec2(TexCoord_GS_in[i].s, TexCoord_GS_in[i].t + 0.5)));
		const vec4 normalt = normalize(vec4(Normal_GS_in[i], 0.0));
		const float dotp = dot(normalt, light);
		const vec4 c = texture2D(texture_color, TexCoord_GS_in[i]);
		const vec4 specular = c*pow(dotp, 1.2);

		gl_Position = Projection*vec4(Position_GS_in[i] + 0.01*normalize(Normal_GS_in[i])*height_sample, 1.0);
		EmitVertex();
	}
	EndPrimitive();
}
