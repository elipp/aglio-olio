#version 410 core
layout(triangles, equal_spacing, ccw) in;

uniform mat4 Projection;

layout (location = 0) in vec3 WorldPos_ES_in[];
layout (location = 1) in vec3 Normal_ES_in[];
layout (location = 2) in vec2 TexCoord_ES_in[];

layout (location = 0) out vec3 WorldPos_GS_in;
layout (location = 1) out vec3 Normal_GS_in;
layout (location = 2) out vec2 TexCoord_GS_in;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main() {

	TexCoord_GS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);
	Normal_GS_in = interpolate3D(Normal_ES_in[0], Normal_ES_in[1], Normal_ES_in[2]);
	Normal_GS_in = normalize(Normal_GS_in);
	WorldPos_GS_in = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]);

	gl_Position = Projection*vec4(WorldPos_GS_in, 1.0);
}
